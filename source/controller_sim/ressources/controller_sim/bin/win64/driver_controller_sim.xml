<?xml version="1.0"?>
<doc>
    <assembly>
        "controller_sim"
    </assembly>
    <members>
        <member name="M:HmdDriverFactory(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32*)">
 La fonction qui sera exportée vers OpenVR, il s'agit de
 notre point d'entrée! (void main() en gros)

 Elle va récupérer des pointeurs vers des classes prédéfinies pour les charger dans SVR

</member>
        <member name="M:Controller_simDriverServer.Init(vr.IVRDriverContext*)">
reference: https://github.com/ValveSoftware/openvr/wiki/IServerTrackedDeviceProvider_Overview
Il s'agit du serveur qui va contrôler les différents appareils, car il peut y en avoir plusieurs par
serveur.

</member>
        <member name="M:dispatchers.DataDispatcher.feedPipeDataToDrivers(std.vector&lt;DoMoDriver**,std.allocator&lt;DoMoDriver**&gt;&gt;)">
            <summary>
permet de faire passer les données reçues par le tunnel nommé aux drivers correspondants (ordre naturel)
</summary>
            <param name="drivers"> une collection de drivers (vecteur)</param>
        </member>
        <member name="M:dispatchers.DataDispatcher.Dispose">
            <summary>
Le destructeur de la classe DataDispatcher, il déconnecte également le tunnel nommé interne
</summary>
        </member>
        <member name="M:dispatchers.DataDispatcher.#ctor">
            <summary>
Le constructeur de la classe DataDispatcher, il créé également le tunnel nommé interne
</summary>
        </member>
        <member name="F:dispatchers.DataDispatcher.localServer">
Le pointeur vers le PipeServer que cette class enrobe
</member>
        <member name="F:dispatchers.DataDispatcher.targetName">
Le nom du tunnel nommé distant (de la moulinette dans ce cas)
</member>
        <member name="F:dispatchers.DataDispatcher.pipeName">
Le nom du tunnel nommé local
</member>
        <member name="F:dispatchers.DataDispatcher.splitData">
Un vecteur contenant les données séparées de la trame d'arrivée, produite en interne en appellant <code>Split()</code> sur la trame brute.
</member>
        <member name="T:dispatchers.DataDispatcher">
            <summary>
La classe DataDispatcher est un wrapper autour de la classe IPCServer et permet d'intéragir avec les tunnels nommés.
</summary>
        </member>
        <member name="M:PipeServer.isConnected">
            <returns>condition si le tunnel nommé local est fonctionnel (connecté) ou non</returns>
        </member>
        <member name="M:PipeServer.WriteToPipe(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary>
Permet d'écrire vers un tunnel nommé spécifié
</summary>
            <param name="message"> Le message à écrire dans le tunnel nommé spécifié</param>
            <param name="targetPipe"> Le nom système du tunnel nommé vers lequel écrire</param>
            <returns>Le succès ou l'échec de l'écriture</returns>
        </member>
        <member name="M:PipeServer.ReadPipe">
            <summary>
Permet de lire les données qui ont été écrites dans le tunnel nommé local (hPipe)
</summary>
            <returns>Le texte lu depuis le tunnel nommé</returns>
        </member>
        <member name="M:PipeServer.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary>
Le constructeur du PipeServer
</summary>
            <param name="pipeName">Le nom système du tunnel, sous le format windows standard "\\.\\\\pipe\\nom_du_tunnel_ici"</param>
        </member>
        <member name="D:size_t">
@author Yorick Geoffre
@brief this files contains the declaration of the PipeServer type which is used for named pipe communication operations.
@version 0.1
@date 16/01/2022

</member>
        <member name="M:DoMoDriver.UpdateInternalValuesFromPipedData(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
Cette fonction gère la mise à jour de valeurs par celles reçues du tunnel nommé


Met à jour les valeurs de position, de rotation et de latence d'un driver (appareil), et renvoie les valeurs inutilisées

</member>
        <member name="M:DoMoDriver.RunFrameStub">
Cette fonction gère la mise à jour des valeurs d'entrée à chaque frame du jeu


Cette fonction gère la mise à jour des valeurs d'entrée à chaque frame du jeu

</member>
        <member name="M:DoMoDriver.Dispose">
            <summary>
Le destructeur de ce driver
</summary>
        </member>
        <member name="M:DoMoDriver.#ctor(DriverDataTemplate)">
            <summary>
Le constructeur d'une classe DoMoDriver (version moderne, désactive le mode obsolète si il est appellé)
</summary>
            <param name="driverDataTemplate">La data Template de ce driver, qui décrit l'appareil que ce driver représente</param>
        </member>
        <member name="T:DoMoDriver">
            <summary>
Cette classe représente un appareil tracké (implémente ITrackedDeviceServerDriver), il a une position et une rotation, et peut
</summary>
        </member>
        <member name="M:ToQuaternion(System.Double,System.Double,System.Double)">
@author Yorick Geoffre
@brief this file holds the declaration of maths-related functions
@version 0.1
@date 16/12/2021

<summary>
Une fonction qui va convertir trois angles d'euler en un quaternion SteamVR
</summary><param name="yaw">Le lacet en degrés</param><param name="pitch">Le tangage en degrés</param><param name="roll">Le roulis en degrés</param><returns>HmdQuaternion_t un quaternion SteamVR</returns></member>
        <member name="M:DriverLog(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
@author Valve corporation
@brief defines the HMD_DLL_EXPORT/IMPORT types which serve as entry points for the DLL
@version 0.1
@date 16/12/2021

</member>
        <member name="F:ATL.CRegKey.m_pTM">
            <summary>
Pointer to CAtlTransactionManager object</summary>
        </member>
        <member name="M:ATL.CRegKey.#ctor(ATL.CAtlTransactionManager*)">
            <summary>
CRegKey constructor</summary>
            <param name="pTM">Pointer to CAtlTransactionManager object</param>
        </member>
    </members>
</doc>